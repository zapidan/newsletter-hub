name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "develop"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs after test suite completes (for test dashboard updates)
  workflow_run:
    workflows: ["Test Suite"]
    types: [completed]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Log workflow trigger
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Triggering workflow: ${{ github.event.workflow_run.name }}"
            echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          fi
      
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: |
          echo "Attempting frozen install..."
          pnpm install --frozen-lockfile || {
            echo "Frozen install failed, updating lockfile..."
            pnpm install --no-frozen-lockfile
          }
      
      - name: Build main application
        if: github.event_name != 'workflow_run'
        run: pnpm build
        env:
          NODE_ENV: production
      
      - name: Download test artifacts (if available)
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts
          path: ./
        continue-on-error: true
      
      - name: Check test artifacts
        id: check-artifacts
        run: |
          echo "Checking for test artifacts..."
          ls -la test-results/ 2>/dev/null || echo "test-results directory not found"
          ls -la html/ 2>/dev/null || echo "html directory not found"
          
          if [ -f "test-results/junit.xml" ]; then
            echo "✅ Test artifacts found"
            echo "found_artifacts=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No test artifacts found, will create minimal test data"
            echo "found_artifacts=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create fallback test data
        if: steps.check-artifacts.outputs.found_artifacts == 'false'
        run: |
          echo "Creating fallback test data..."
          mkdir -p test-results
          mkdir -p html
          mkdir -p test-dashboard
          
          # Create minimal test results
          cat > test-results/junit.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <testsuites>
            <testsuite name="No Tests Run" tests="0" failures="0" errors="0" skipped="0" time="0">
            </testsuite>
          </testsuites>
          EOF
          
          # Create minimal coverage report
          cat > html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Coverage Report - No Data Available</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .container { max-width: 800px; margin: 0 auto; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Coverage Report</h1>
              <div class="warning">
                <h2>⚠️ No Coverage Data Available</h2>
                <p>Test coverage data was not found.</p>
              </div>
            </div>
          </body>
          </html>
          EOF
          
          # Create minimal dashboard
          cat > test-dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Test Dashboard - No Data Available</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .container { max-width: 800px; margin: 0 auto; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Test Dashboard</h1>
              <div class="warning">
                <h2>⚠️ No Test Data Available</h2>
                <p>Test artifacts were not found.</p>
              </div>
            </div>
          </body>
          </html>
          EOF
        continue-on-error: true
      
      - name: Ensure all directories exist and have content
        run: |
          echo "Ensuring all required directories exist..."
          
          # Create directories if they don't exist
          mkdir -p test-results
          mkdir -p test-dashboard
          mkdir -p html
          mkdir -p docs/testing
          
          # Ensure test-results has content
          if [ ! -f "test-results/junit.xml" ]; then
            echo "Creating minimal test results..."
            cat > test-results/junit.xml << 'EOF'
            <?xml version="1.0" encoding="UTF-8"?>
            <testsuites>
              <testsuite name="No Tests Run" tests="0" failures="0" errors="0" skipped="0" time="0">
              </testsuite>
            </testsuites>
            EOF
          fi
          
          # Ensure html has content
          if [ ! -f "html/index.html" ]; then
            echo "Creating minimal coverage report..."
            cat > html/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
              <title>Coverage Report - No Data Available</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 800px; margin: 0 auto; }
                .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; }
              </style>
            </head>
            <body>
              <div class="container">
                <h1>Coverage Report</h1>
                <div class="warning">
                  <h2>⚠️ No Coverage Data Available</h2>
                  <p>Test coverage data was not found.</p>
                </div>
              </div>
            </body>
            </html>
            EOF
          fi
          
          # Ensure test-dashboard has content
          if [ ! -f "test-dashboard/index.html" ]; then
            echo "Creating minimal dashboard..."
            cat > test-dashboard/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
              <title>Test Dashboard - No Data Available</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 800px; margin: 0 auto; }
                .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; }
              </style>
            </head>
            <body>
              <div class="container">
                <h1>Test Dashboard</h1>
                <div class="warning">
                  <h2>⚠️ No Test Data Available</h2>
                  <p>Test artifacts were not found.</p>
                </div>
              </div>
            </body>
            </html>
            EOF
          fi
          
          # Ensure docs/testing has content
          if [ ! -f "docs/testing/README.md" ]; then
            echo "Creating minimal docs/testing content..."
            cat > docs/testing/README.md << 'EOF'
            # Testing Documentation
            
            This directory contains testing documentation and reports.
            
            ## Available Reports
            
            - Test Results: `/test-results/`
            - Coverage Reports: `/html/`
            - Test Dashboard: `/test-dashboard/`
            
            EOF
          fi
          
          echo "Directory contents:"
          ls -la test-dashboard/ || echo "test-dashboard empty"
          ls -la test-results/ || echo "test-results empty"
          ls -la html/ || echo "html empty"
          ls -la docs/testing/ || echo "docs/testing empty"
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: |
            dist/
            test-results/
            test-dashboard/
            html/
            docs/testing/
            index.html
            public/

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 