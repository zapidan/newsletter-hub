name: Deploy to GitHub Pages - Updated

# Force refresh: Updated to fix upload path parsing issues - v2
# This version uses _pages directory approach to avoid path parsing issues
on:
  workflow_run:
    workflows: ["Test Suite"]
    types:
      - completed

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    if: ${{ github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log workflow trigger
        run: |
          echo "=== WORKFLOW DEBUG INFO ==="
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Workflow file version: $(date)"
          echo "Current working directory: $(pwd)"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "=== END DEBUG INFO ==="

      - name: Download test artifacts from triggering workflow
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: test.yml
          workflow_conclusion: success
          name: test-artifacts
          path: .
          run_id: ${{ github.event.workflow_run.id }}

      - name: Fail if artifacts are missing
        run: |
          echo "Checking for test artifacts..."
          if [ ! -d "test-results" ] || [ ! -f "test-results/junit.xml" ]; then
            echo "❌ Test artifacts not found. Deployment aborted."
            exit 1
          fi
          echo "✅ Test artifacts found. Proceeding with deployment."

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare pages content
        run: |
          echo "Preparing pages content..."
          mkdir -p _pages
          # Copy built application contents to the root of _pages
          if [ -d "dist" ]; then
            echo "Copying built application contents from dist/..."
            cp -r dist/* _pages/
          fi
          # Copy other content
          cp -r test-results _pages/ 2>/dev/null || echo "test-results not found"
          cp -r test-dashboard _pages/ 2>/dev/null || echo "test-dashboard not found"
          cp -r html _pages/ 2>/dev/null || echo "html not found"
          cp -r docs/testing _pages/ 2>/dev/null || echo "docs/testing not found"
          cp -r public _pages/ 2>/dev/null || echo "public not found"
          # Copy index.html if it exists in root (fallback)
          if [ -f "index.html" ] && [ ! -f "_pages/index.html" ]; then
            cp index.html _pages/ 2>/dev/null || echo "index.html copy failed"
          fi
          # Make simple test table the main index for test-results directory
          if [ -f "_pages/test-results/simple-test-table.html" ]; then
            echo "Setting simple test table as main index for test-results..."
            cp _pages/test-results/simple-test-table.html _pages/test-results/index.html
          fi
          echo "Pages content prepared:"
          ls -la _pages/
          ls -la _pages/assets/ 2>/dev/null || echo "no assets dir"

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _pages/
        continue-on-error: true

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.workflow_run.head_branch == 'main' }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 