name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job to detect changes and set up matrix
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
      deps: ${{ steps.changes.outputs.deps }}
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'public/**'
              - '*.config.*'
              - 'tsconfig*.json'
            tests:
              - 'src/**/*.{test,spec}.{js,ts,jsx,tsx}'
              - 'src/__tests__/**'
              - 'playwright.config.ts'
              - 'vitest.config.ts'
            deps:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'package-lock.json'

  # Lint and type check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🎯 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm lint

      - name: 🔍 Run TypeScript check
        run: pnpm type-check

      - name: 📊 Upload lint results
        uses: github/super-linter@v4
        if: always()
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true

  # Unit and Integration Tests
  unit-integration-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🏗 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🎯 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test:unit
        env:
          NODE_ENV: test

      - name: 🔗 Run integration tests
        run: pnpm test:integration
        env:
          NODE_ENV: test

      - name: 📊 Upload unit test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests (Node ${{ matrix.node-version }})
          path: 'test-results/unit-results.xml'
          reporter: jest-junit

      - name: 📊 Upload integration test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Tests (Node ${{ matrix.node-version }})
          path: 'test-results/integration-results.xml'
          reporter: jest-junit

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/3, 2/3, 3/3]
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🎯 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: 🏗 Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: 🧪 Run E2E tests
        run: pnpm test:e2e --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
        env:
          CI: true
          NODE_ENV: test

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ strategy.job-index }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: 📊 Upload E2E test report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: E2E Tests (${{ matrix.browser }} - Shard ${{ matrix.shard }})
          path: 'playwright-report/results.xml'
          reporter: jest-junit

  # Coverage Report
  coverage:
    runs-on: ubuntu-latest
    needs: [unit-integration-tests]
    if: always() && (needs.unit-integration-tests.result == 'success')
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🎯 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📊 Generate coverage report
        run: pnpm test:coverage
        env:
          NODE_ENV: test

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Upload coverage reports to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        if: github.event_name == 'push'
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage/lcov.info

      - name: 📊 Coverage Summary
        run: |
          echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.md >> $GITHUB_STEP_SUMMARY

      - name: 📊 Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.deps == 'true' || github.event_name == 'schedule'
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run security audit
        run: pnpm audit --audit-level moderate

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck]
    if: needs.changes.outputs.src == 'true' && github.event_name == 'pull_request'
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗 Build application
        run: pnpm build

      - name: 🚀 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Visual Regression Tests
  visual-tests:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck]
    if: needs.changes.outputs.src == 'true' && github.event_name == 'pull_request'
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: 🏗 Build application
        run: pnpm build

      - name: 👁 Run visual regression tests
        run: pnpm test:e2e --grep @visual
        env:
          CI: true

      - name: 📊 Upload visual test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-test-failures
          path: test-results/
          retention-days: 7

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-integration-tests, e2e-tests, coverage]
    if: always()
    steps:
      - name: 📋 Test Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & TypeCheck | ${{ needs.lint-and-typecheck.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit & Integration | ${{ needs.unit-integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| End-to-End | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result == 'success' && '✅ Generated' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 All tests passed
        if: needs.lint-and-typecheck.result == 'success' && needs.unit-integration-tests.result == 'success' && needs.e2e-tests.result == 'success'
        run: echo "🎉 All tests passed successfully!"

      - name: ❌ Some tests failed
        if: needs.lint-and-typecheck.result == 'failure' || needs.unit-integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure'
        run: |
          echo "❌ Some tests failed. Please check the individual job results."
          exit 1

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    steps:
      - name: 🧹 Cleanup artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            e2e-results-*
            visual-test-failures
          failOnError: false
