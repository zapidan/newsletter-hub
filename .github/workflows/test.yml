name: Test Suite

on:
  push:
    branches-ignore: [] # Empty list means all branches will trigger the workflow
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job to detect changes and set up matrix
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
      deps: ${{ steps.changes.outputs.deps }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'public/**'
              - '*.config.*'
              - 'tsconfig*.json'
            tests:
              - 'src/**/*.{test,spec}.{js,ts,jsx,tsx}'
              - 'src/__tests__/**'
              - 'playwright.config.ts'
              - 'vitest.config.ts'
            deps:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'package-lock.json'

  # Lint and type check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
    permissions:
      contents: read
      pull-requests: write
      checks: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run TypeScript check
        run: pnpm type-check

  # Run all tests (unit, integration, e2e) in a single job
  test:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # - name: Install Playwright browsers
      #   run: pnpm exec playwright install --with-deps chromium

      - name: Create test results directory
        run: |
          mkdir -p test-results
          chmod -R 777 test-results

      - name: Run tests with coverage and generate reports
        run: pnpm test:ci
        env:
          CI: 'true'
          NODE_ENV: 'test'
          VITEST_JUNIT_OUTPUT_DIR: 'test-results'
          VITEST_JUNIT_SUITE_NAME: 'Test Results'
        continue-on-error: true

      - name: Debug scripts directory
        if: always()
        run: |
          echo "PWD: $(pwd)"
          ls -la scripts/
          echo "Test results directory:"
          ls -la test-results/ || echo "test-results directory not found"

      - name: Generate test reports
        if: always()
        run: |
          echo "=== Generating Test Reports ==="
          echo "Generating test results HTML..."
          pnpm test:results:parse || echo "⚠️ Test results HTML generation failed, creating fallback"
          echo "Generating coverage report..."
          pnpm test:coverage:parse || echo "⚠️ Coverage report generation failed"
          echo "Generating test dashboard..."
          pnpm test:dashboard || echo "⚠️ Test dashboard generation failed"
          echo "Generating simple test table..."
          pnpm test:results:simple || echo "⚠️ Simple test table generation failed"
          echo "=== Test Reports Generation Complete ==="
        continue-on-error: true

      - name: Create fallback test results
        if: always()
        run: |
          mkdir -p test-results
          if [ ! -f "test-results/junit.xml" ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?><testsuites><testsuite name="No Tests Run" tests="0" failures="0" errors="0" skipped="0" time="0"></testsuite></testsuites>' > test-results/junit.xml
          fi
          if [ ! -d "html" ]; then
            mkdir -p html
            echo '<html><body><h1>No Coverage Data Available</h1></body></html>' > html/index.html
          fi
          if [ ! -d "test-dashboard" ]; then
            mkdir -p test-dashboard
            echo '<html><body><h1>Test Dashboard</h1><p>No test data available</p></body></html>' > test-dashboard/index.html
          fi
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: 'Test Results'
          path: 'test-results/*.xml'
          reporter: 'java-junit'
          fail-on-error: 'false'
          only-summary: 'true'

      - name: Debug dist directory before upload
        run: |
          echo "Listing dist directory:"
          ls -la dist || echo "dist directory not found"
          echo "Listing workspace root:"
          ls -la

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            dist/*
            test-results/
            html/
            test-dashboard/
            playwright-report/
            coverage/
          retention-days: 7

  # # Visual regression tests (runs only on PRs)
  # visual-tests:
  #   runs-on: ubuntu-latest
  #   needs: [changes, lint-and-typecheck]
  #   if: needs.changes.outputs.src == 'true' && github.event_name == 'pull_request'
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: ${{ env.PNPM_VERSION }}
  #         run_install: true

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'pnpm'

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Build application
  #       run: pnpm build
  #       env:
  #         NODE_ENV: production

  #     - name: Start development server
  #       run: pnpm dev &

  #     - name: Run visual regression tests
  #       run: pnpm test:visual

  #     - name: Upload visual test artifacts
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: visual-test-artifacts
  #         path: |
  #           test-visual/
  #           playwright-report/
  #         retention-days: 7
