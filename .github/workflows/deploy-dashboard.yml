name: Deploy Test Dashboard to GitHub Pages

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_run:
    workflows: ["Test Suite"]
    types: [completed]

jobs:
  deploy-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8'
          run_install: true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts
          path: ./
        continue-on-error: true

      - name: Check if artifacts were downloaded
        id: check-artifacts
        run: |
          echo "Checking for test artifacts..."
          ls -la test-results/ 2>/dev/null || echo "test-results directory not found"
          ls -la html/ 2>/dev/null || echo "html directory not found"
          ls -la test-dashboard/ 2>/dev/null || echo "test-dashboard directory not found"
          
          if [ -f "test-results/junit.xml" ]; then
            echo "✅ Test artifacts found, proceeding with report generation"
            echo "found_artifacts=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No test artifacts found, will create minimal dashboard"
            echo "found_artifacts=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate additional reports from existing data
        if: steps.check-artifacts.outputs.found_artifacts == 'true'
        run: |
          echo "Generating additional reports..."
          pnpm test:results:parse || echo "Could not parse test results"
          pnpm test:coverage:parse || echo "Could not parse coverage"
          pnpm test:dashboard || echo "Could not generate dashboard"
        env:
          CI: 'true'
          NODE_ENV: 'test'
        continue-on-error: true

      - name: Create minimal dashboard if no artifacts
        if: steps.check-artifacts.outputs.found_artifacts == 'false'
        run: |
          echo "Creating minimal dashboard..."
          mkdir -p test-dashboard
          mkdir -p test-results
          mkdir -p html
          
          # Create minimal test results
          cat > test-results/junit.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <testsuites>
            <testsuite name="No Tests Run" tests="0" failures="0" errors="0" skipped="0" time="0">
            </testsuite>
          </testsuites>
          EOF
          
          # Create minimal coverage report
          cat > html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Coverage Report - No Data Available</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .container { max-width: 800px; margin: 0 auto; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Coverage Report</h1>
              <div class="warning">
                <h2>⚠️ No Coverage Data Available</h2>
                <p>Test coverage data was not found. This could be because:</p>
                <ul>
                  <li>The main test workflow hasn't completed yet</li>
                  <li>The test workflow failed before generating coverage</li>
                  <li>There was an issue with artifact upload/download</li>
                </ul>
              </div>
            </div>
          </body>
          </html>
          EOF
          
          # Create minimal dashboard
          cat > test-dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Test Dashboard - No Data Available</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .container { max-width: 800px; margin: 0 auto; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Test Dashboard</h1>
              <div class="warning">
                <h2>⚠️ No Test Data Available</h2>
                <p>Test artifacts were not found. This could be because:</p>
                <ul>
                  <li>The main test workflow hasn't completed yet</li>
                  <li>The test workflow failed before generating artifacts</li>
                  <li>There was an issue with artifact upload/download</li>
                </ul>
                <p>Please check the main test workflow status and try again.</p>
              </div>
            </div>
          </body>
          </html>
          EOF
        continue-on-error: true

      - name: Verify required directories exist
        run: |
          echo "Verifying required directories exist..."
          mkdir -p test-dashboard
          mkdir -p test-results
          mkdir -p html
          mkdir -p docs/testing
          
          echo "Directory contents:"
          ls -la test-dashboard/ || echo "test-dashboard empty"
          ls -la test-results/ || echo "test-results empty"
          ls -la html/ || echo "html empty"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload dashboard to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: |
            test-dashboard/
            test-results/
            html/
            docs/testing/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' 