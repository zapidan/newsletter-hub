<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="281" failures="21" errors="0" time="6.025365274">
    <testsuite name="src/__tests__/simple.test.ts" timestamp="2025-06-19T01:01:26.088Z" hostname="MacBookPro.attlocal.net" tests="5" failures="0" errors="0" skipped="0" time="0.017619658">
        <testcase classname="src/__tests__/simple.test.ts" name="Simple Test &gt; should pass basic assertion" time="0.001555614">
        </testcase>
        <testcase classname="src/__tests__/simple.test.ts" name="Simple Test &gt; should handle string operations" time="0.000337324">
        </testcase>
        <testcase classname="src/__tests__/simple.test.ts" name="Simple Test &gt; should work with arrays" time="0.001290691">
        </testcase>
        <testcase classname="src/__tests__/simple.test.ts" name="Simple Test &gt; should work with objects" time="0.000467406">
        </testcase>
        <testcase classname="src/__tests__/simple.test.ts" name="Simple Test &gt; should handle async operations" time="0.010585615">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/integration/newsletter-workflow.integration.test.tsx" timestamp="2025-06-19T01:01:26.091Z" hostname="MacBookPro.attlocal.net" tests="24" failures="0" errors="0" skipped="0" time="0.018055969">
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Inbox Workflow &gt; should display newsletters in inbox and allow filtering" time="0.004015721">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Inbox Workflow &gt; should allow marking newsletters as read" time="0.000915284">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Inbox Workflow &gt; should handle bulk operations" time="0.000586671">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Inbox Workflow &gt; should filter newsletters by read status" time="0.000892159">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Inbox Workflow &gt; should filter newsletters by source" time="0.000676386">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Inbox Workflow &gt; should handle newsletter archiving" time="0.000391315">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Inbox Workflow &gt; should handle newsletter deletion" time="0.000279085">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Detail Workflow &gt; should display newsletter detail and mark as read" time="0.000274047">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Detail Workflow &gt; should allow adding and removing tags" time="0.000565177">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Detail Workflow &gt; should allow favoriting newsletters" time="0.00032567">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Detail Workflow &gt; should handle newsletter sharing" time="0.000248803">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Newsletter Detail Workflow &gt; should display related newsletters" time="0.000284451">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Error Handling &gt; should handle API errors gracefully" time="0.000239682">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Error Handling &gt; should handle network errors" time="0.00020907">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Error Handling &gt; should handle empty states" time="0.000884414">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Loading States &gt; should show loading state while fetching newsletters" time="0.00026225">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Loading States &gt; should show skeleton loading for newsletter detail" time="0.000235416">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Responsive Behavior &gt; should adapt to mobile viewport" time="0.00016209">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Responsive Behavior &gt; should adapt to tablet viewport" time="0.000248959">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Accessibility &gt; should be keyboard navigable" time="0.000199188">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Accessibility &gt; should have proper ARIA labels" time="0.000137512">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Accessibility &gt; should announce state changes to screen readers" time="0.000125257">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Performance &gt; should virtualize long lists" time="0.000253296">
        </testcase>
        <testcase classname="src/__tests__/integration/newsletter-workflow.integration.test.tsx" name="Newsletter Workflow Integration Tests &gt; Performance &gt; should implement infinite scrolling" time="0.000239788">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/smoke/auto-mark-read.smoke.test.ts" timestamp="2025-06-19T01:01:26.097Z" hostname="MacBookPro.attlocal.net" tests="6" failures="0" errors="0" skipped="0" time="1.092377004">
        <testcase classname="src/__tests__/smoke/auto-mark-read.smoke.test.ts" name="Auto Mark As Read Smoke Tests &gt; should be able to import shared newsletter actions" time="1.000554395">
        </testcase>
        <testcase classname="src/__tests__/smoke/auto-mark-read.smoke.test.ts" name="Auto Mark As Read Smoke Tests &gt; should be able to import newsletter navigation with auto-mark feature" time="0.080881755">
        </testcase>
        <testcase classname="src/__tests__/smoke/auto-mark-read.smoke.test.ts" name="Auto Mark As Read Smoke Tests &gt; should have markAsRead function in newsletter API" time="0.000398296">
        </testcase>
        <testcase classname="src/__tests__/smoke/auto-mark-read.smoke.test.ts" name="Auto Mark As Read Smoke Tests &gt; should have handleMarkAsRead in shared actions" time="0.000269022">
        </testcase>
        <testcase classname="src/__tests__/smoke/auto-mark-read.smoke.test.ts" name="Auto Mark As Read Smoke Tests &gt; should export required types for auto-mark functionality" time="0.000500093">
        </testcase>
        <testcase classname="src/__tests__/smoke/auto-mark-read.smoke.test.ts" name="Auto Mark As Read Smoke Tests &gt; should have proper TypeScript types for newsletter with read status" time="0.005133986">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" timestamp="2025-06-19T01:01:26.099Z" hostname="MacBookPro.attlocal.net" tests="8" failures="0" errors="0" skipped="0" time="0.042282373">
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should be able to import navigation hook with mark and archive functionality" time="0.002262767">
        </testcase>
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should provide navigation state correctly for mark and archive operations" time="0.016808572">
        </testcase>
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should handle navigation state transitions properly" time="0.002750848">
        </testcase>
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should verify shared newsletter actions are configured correctly" time="0.001871197">
        </testcase>
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should handle navigation actions without errors" time="0.004206706">
        </testcase>
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should handle edge cases for first and last newsletters in mark/archive context" time="0.005151815">
        </testcase>
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should handle newsletters with different read/archive states" time="0.001814437">
        </testcase>
        <testcase classname="src/__tests__/smoke/navigation-mark-archive.smoke.test.ts" name="Navigation Mark and Archive Smoke Tests &gt; should handle loading states without breaking mark/archive functionality" time="0.001908855">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" timestamp="2025-06-19T01:01:26.101Z" hostname="MacBookPro.attlocal.net" tests="10" failures="0" errors="0" skipped="0" time="0.043920487">
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should be able to import navigation hook" time="0.002029698">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should provide navigation state correctly" time="0.017478487">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should identify navigation availability correctly" time="0.002461719">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should handle edge cases for first and last newsletters" time="0.004614882">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should return correct newsletter IDs for navigation" time="0.003133584">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should handle disabled state" time="0.001672157">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should handle missing newsletter ID gracefully" time="0.001721961">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should verify navigation bar renders even with missing currentIndex" time="0.001579263">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should verify mark-as-read functionality is accessible" time="0.002054197">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation-fixes.smoke.test.ts" name="Newsletter Navigation Fixes Smoke Tests &gt; should handle loading states without breaking navigation" time="0.002604547">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/smoke/newsletter-navigation.smoke.test.ts" timestamp="2025-06-19T01:01:26.104Z" hostname="MacBookPro.attlocal.net" tests="4" failures="0" errors="0" skipped="0" time="0.783701762">
        <testcase classname="src/__tests__/smoke/newsletter-navigation.smoke.test.ts" name="Newsletter Navigation Smoke Tests &gt; should be able to import navigation hook" time="0.655703426">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation.smoke.test.ts" name="Newsletter Navigation Smoke Tests &gt; should be able to import navigation component" time="0.111861649">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation.smoke.test.ts" name="Newsletter Navigation Smoke Tests &gt; should export hook variants" time="0.000472325">
        </testcase>
        <testcase classname="src/__tests__/smoke/newsletter-navigation.smoke.test.ts" name="Newsletter Navigation Smoke Tests &gt; should have proper TypeScript types" time="0.000391468">
        </testcase>
    </testsuite>
    <testsuite name="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" timestamp="2025-06-19T01:01:26.105Z" hostname="MacBookPro.attlocal.net" tests="19" failures="0" errors="0" skipped="0" time="0.018357813">
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Basic API Interface &gt; should have correct API structure" time="0.003320292">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Basic API Interface &gt; should handle basic newsletter operations" time="0.000483475">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Basic API Interface &gt; should support filtering operations" time="0.000500789">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Basic API Interface &gt; should support pagination parameters" time="0.000436216">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Data Structures &gt; should handle newsletter data structure" time="0.000530971">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Data Structures &gt; should handle API response structure" time="0.000301629">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Data Structures &gt; should handle error structures" time="0.000206799">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Hook Interface &gt; should define expected hook return types" time="0.000614658">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Hook Interface &gt; should support filter options" time="0.000550414">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Hook Interface &gt; should handle mutation operations" time="0.000604388">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Cache and Performance &gt; should support cache operations" time="0.000395557">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Cache and Performance &gt; should handle performance optimizations" time="0.000284763">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Cache and Performance &gt; should support query key generation" time="0.000220881">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Error Handling &gt; should handle different error types" time="0.000284155">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Error Handling &gt; should handle error recovery" time="0.000360542">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Error Handling &gt; should support graceful degradation" time="0.000234929">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Integration Points &gt; should integrate with React Query" time="0.000408562">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Integration Points &gt; should integrate with authentication" time="0.000455686">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.comprehensive.test.tsx" name="useNewsletters Comprehensive Tests &gt; Integration Points &gt; should integrate with logging" time="0.000389765">
        </testcase>
    </testsuite>
    <testsuite name="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" timestamp="2025-06-19T01:01:26.112Z" hostname="MacBookPro.attlocal.net" tests="18" failures="0" errors="0" skipped="0" time="0.016097399">
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Data Consistency &gt; should handle concurrent data updates" time="0.002895098">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Data Consistency &gt; should handle filter state consistency" time="0.00073182">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Data Consistency &gt; should handle loading state transitions" time="0.000550278">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Optimistic Updates &gt; should handle optimistic update patterns" time="0.000753917">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Optimistic Updates &gt; should handle rollback scenarios" time="0.000431077">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Optimistic Updates &gt; should handle concurrent optimistic updates" time="0.000348848">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Cache Management &gt; should handle cache invalidation" time="0.000705151">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Cache Management &gt; should handle cache consistency" time="0.000279057">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Cache Management &gt; should handle stale data scenarios" time="0.000363689">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Error Recovery &gt; should handle error recovery patterns" time="0.000274528">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Error Recovery &gt; should handle partial failures" time="0.000541846">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Error Recovery &gt; should handle network failure recovery" time="0.000318901">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Performance Optimization &gt; should handle debounced operations" time="0.000226353">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Performance Optimization &gt; should handle memoization" time="0.000291999">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; Performance Optimization &gt; should handle batched updates" time="0.000317289">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; State Synchronization &gt; should handle multi-tab synchronization" time="0.000254922">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; State Synchronization &gt; should handle real-time updates" time="0.000370889">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.race-condition.test.tsx" name="useNewsletters Race Condition Tests &gt; State Synchronization &gt; should handle offline/online synchronization" time="0.00026935">
        </testcase>
    </testsuite>
    <testsuite name="src/common/hooks/__tests__/useNewsletters.test.tsx" timestamp="2025-06-19T01:01:26.117Z" hostname="MacBookPro.attlocal.net" tests="9" failures="0" errors="0" skipped="0" time="0.446148611">
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; toggleLike mutation &gt; should properly update is_liked field in optimistic update" time="0.085850286">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; toggleLike mutation &gt; should handle undefined previousNewsletters gracefully" time="0.058044618">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; toggleLike mutation &gt; should execute rollback functions on error" time="0.058505217">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; error handling and fallbacks &gt; should invalidate cache on optimistic update failure" time="0.057042075">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; error handling and fallbacks &gt; should handle partial rollback function failures gracefully" time="0.056484774">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; loading and error states &gt; should expose loading states correctly" time="0.002544792">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; loading and error states &gt; should expose error states correctly" time="0.002511187">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; filter preservation &gt; should preserve filter state during like/unlike operations" time="0.05569606">
        </testcase>
        <testcase classname="src/common/hooks/__tests__/useNewsletters.test.tsx" name="useNewsletters - Action Fixes &gt; filter preservation &gt; should not trigger refetch on like error when using filters" time="0.063983783">
        </testcase>
    </testsuite>
    <testsuite name="src/common/services/__tests__/NewsletterService.test.ts" timestamp="2025-06-19T01:01:26.120Z" hostname="MacBookPro.attlocal.net" tests="33" failures="0" errors="0" skipped="0" time="3.037003104">
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; getNewsletter &gt; should return newsletter when found" time="0.004346858">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; getNewsletter &gt; should throw NotFoundError when newsletter not found" time="0.002256582">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; getNewsletter &gt; should validate newsletter ID" time="0.000762925">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; getNewsletters &gt; should return paginated newsletters with processed params" time="0.001234582">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; getNewsletters &gt; should apply default parameters when none provided" time="0.000713919">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; markAsRead &gt; should mark newsletter as read successfully" time="0.00096648">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; markAsRead &gt; should return error when API call fails" time="0.000506743">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; markAsRead &gt; should handle API errors gracefully" time="0.000559157">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; markAsUnread &gt; should mark newsletter as unread successfully" time="0.000805266">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; bulkMarkAsRead &gt; should mark multiple newsletters as read" time="0.001307794">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; bulkMarkAsRead &gt; should handle partial failures" time="0.001110531">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; bulkMarkAsRead &gt; should validate input array" time="0.000537862">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; toggleLike &gt; should toggle like status successfully" time="0.000631483">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; toggleLike &gt; should return error when newsletter not found" time="0.000325752">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; toggleArchive &gt; should toggle archive status and remove from reading queue when archived" time="0.00078225">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; toggleArchive &gt; should not remove from reading queue when unarchiving" time="0.000545928">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; addToReadingQueue &gt; should add newsletter to reading queue successfully" time="0.000932083">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; addToReadingQueue &gt; should prevent adding archived newsletter to reading queue" time="0.000418827">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; addToReadingQueue &gt; should return error when newsletter not found" time="0.000346521">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; removeFromReadingQueue &gt; should remove newsletter from reading queue successfully" time="0.000481404">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; removeFromReadingQueue &gt; should return error when removal fails" time="0.000296168">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; updateTags &gt; should update newsletter tags successfully" time="0.000834396">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; updateTags &gt; should return error when newsletter not found" time="0.00034191">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; updateTags &gt; should return error when tag not found" time="0.000336453">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; updateTags &gt; should validate tag IDs array" time="0.00048584">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; searchNewsletters &gt; should search newsletters with query and filters" time="0.00078278">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; searchNewsletters &gt; should validate search query" time="0.000431915">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; searchNewsletters &gt; should trim search query" time="0.002115363">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; error handling and retries &gt; should retry failed operations" time="3.002507686">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; error handling and retries &gt; should handle timeout errors" time="0.000551321">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; error handling and retries &gt; should normalize different error types" time="0.000518953">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; validation &gt; should validate required string parameters" time="0.00116431">
        </testcase>
        <testcase classname="src/common/services/__tests__/NewsletterService.test.ts" name="NewsletterService &gt; validation &gt; should validate array parameters" time="0.000825055">
        </testcase>
    </testsuite>
    <testsuite name="src/common/services/__tests__/TagService.test.ts" timestamp="2025-06-19T01:01:26.140Z" hostname="MacBookPro.attlocal.net" tests="48" failures="0" errors="0" skipped="0" time="0.042293458">
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getAllTags &gt; should return tags with usage stats when requested" time="0.004141931">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getAllTags &gt; should return tags without usage stats when not requested" time="0.000852589">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getAllTags &gt; should default to not including usage stats" time="0.000652928">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTag &gt; should return tag when found" time="0.001447939">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTag &gt; should throw NotFoundError when tag not found" time="0.002067765">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTag &gt; should validate tag ID" time="0.000647178">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; createTag &gt; should create tag successfully with valid data" time="0.001451366">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; createTag &gt; should sanitize tag name" time="0.000636624">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; createTag &gt; should use default color when none provided" time="0.000765185">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; createTag &gt; should prevent duplicate tag names" time="0.0004802">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; createTag &gt; should be case insensitive for duplicate detection" time="0.000313131">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; createTag &gt; should handle API errors gracefully" time="0.000555038">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; createTag &gt; should assign next available color from palette" time="0.000510542">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateTag &gt; should update tag successfully" time="0.000847787">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateTag &gt; should return error when tag not found" time="0.000325753">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateTag &gt; should prevent duplicate names during update" time="0.000462035">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateTag &gt; should allow updating tag with same name" time="0.000322102">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateTag &gt; should validate tag ID" time="0.000269154">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; deleteTag &gt; should delete tag successfully" time="0.000649723">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; deleteTag &gt; should return error when tag not found" time="0.000313001">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; deleteTag &gt; should warn when deleting tag with many associated newsletters" time="0.000286804">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; deleteTag &gt; should return error when deletion fails" time="0.000278405">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getOrCreateTag &gt; should get existing tag" time="0.000598267">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getOrCreateTag &gt; should create new tag with color" time="0.000440898">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getOrCreateTag &gt; should sanitize tag name" time="0.000329383">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateNewsletterTags &gt; should update newsletter tags successfully" time="0.00064026">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateNewsletterTags &gt; should return error when tag not found" time="0.000331485">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateNewsletterTags &gt; should enforce maximum tag limit" time="0.000348552">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; updateNewsletterTags &gt; should validate inputs" time="0.000547961">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; searchTags &gt; should search tags successfully" time="0.001031854">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; searchTags &gt; should validate search query" time="0.000485602">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; searchTags &gt; should trim search query" time="0.000320781">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTagSuggestions &gt; should return tag suggestions based on usage" time="0.000941439">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTagSuggestions &gt; should filter out existing tags" time="0.00044649">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTagSuggestions &gt; should limit suggestions to maxSuggestions option" time="0.000400959">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTagUsageStats &gt; should return tag usage statistics" time="0.000679813">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTagUsageStats &gt; should return null when tag not found" time="0.000308962">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; getTagUsageStats &gt; should limit recent newsletters to 5" time="0.000928438">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; bulkCreateTags &gt; should create multiple tags successfully" time="0.000936112">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; bulkCreateTags &gt; should handle partial failures" time="0.000904114">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; bulkCreateTags &gt; should validate input array" time="0.00051311">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; name sanitization &gt; should handle empty name" time="0.000574757">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; name sanitization &gt; should handle whitespace-only name" time="0.001148619">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; name sanitization &gt; should handle long names" time="0.00083594">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; name sanitization &gt; should normalize multiple spaces" time="0.000542755">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; color validation &gt; should accept valid hex colors" time="0.00287702">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; color validation &gt; should accept 3-digit hex colors" time="0.000595733">
        </testcase>
        <testcase classname="src/common/services/__tests__/TagService.test.ts" name="TagService &gt; color validation &gt; should reject invalid hex colors" time="0.000508018">
        </testcase>
    </testsuite>
    <testsuite name="src/web/components/__tests__/NewsletterCard.test.tsx" timestamp="2025-06-19T01:01:26.151Z" hostname="MacBookPro.attlocal.net" tests="28" failures="0" errors="0" skipped="0" time="0.260383638">
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; renders newsletter title" time="0.083039747">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; renders newsletter source information" time="0.008387548">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; renders &quot;Unknown Source&quot; when source is missing" time="0.005384134">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; renders formatted date" time="0.004715956">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; renders newsletter image when provided" time="0.009335299">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; does not render image container when no image URL" time="0.004874956">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Queue functionality &gt; renders queue button when showQueueButton is true" time="0.005325755">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Queue functionality &gt; does not render queue button when showQueueButton is false" time="0.004414726">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Queue functionality &gt; shows &quot;Remove from queue&quot; title when isInQueue is true" time="0.004742848">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Queue functionality &gt; shows &quot;Add to queue&quot; title when isInQueue is false" time="0.003771788">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Queue functionality &gt; calls onToggleQueue with correct parameters when queue button is clicked" time="0.01028842">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Queue functionality &gt; calls onToggleQueue to remove from queue when already in queue" time="0.003702598">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Queue functionality &gt; prevents event propagation when queue button is clicked" time="0.004276989">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Archive functionality &gt; renders archive button when showArchiveButton is true" time="0.003620178">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Archive functionality &gt; does not render archive button when showArchiveButton is false" time="0.002627694">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Archive functionality &gt; shows &quot;Unarchive&quot; title when newsletter is archived" time="0.002834042">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Archive functionality &gt; shows &quot;Archive&quot; title when newsletter is not archived" time="0.003190892">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Archive functionality &gt; calls onToggleArchive with correct parameters when archive button is clicked" time="0.003648491">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Archive functionality &gt; calls onToggleArchive to unarchive when already archived" time="0.004351978">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Archive functionality &gt; prevents event propagation when archive button is clicked" time="0.00391718">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Tags functionality &gt; renders tags when newsletter has tags" time="0.004562891">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Tags functionality &gt; does not render tags section when newsletter has no tags" time="0.003910066">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Tags functionality &gt; applies correct tag styling with color" time="0.044922082">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Accessibility &gt; has proper button labels for screen readers" time="0.003048798">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Accessibility &gt; has alt text for newsletter image" time="0.003385531">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Layout and styling &gt; applies hover effects to the card" time="0.008533888">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Layout and styling &gt; handles long titles with line clamp" time="0.003076837">
        </testcase>
        <testcase classname="src/web/components/__tests__/NewsletterCard.test.tsx" name="NewsletterCard &gt; Layout and styling &gt; uses flexbox layout for proper card structure" time="0.004557555">
        </testcase>
    </testsuite>
    <testsuite name="src/web/services/__tests__/searchService.simple.test.ts" timestamp="2025-06-19T01:01:26.156Z" hostname="MacBookPro.attlocal.net" tests="33" failures="0" errors="0" skipped="0" time="0.021467264">
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Basic functionality &gt; should create default filters" time="0.002656081">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Basic functionality &gt; should create initial state" time="0.000487616">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Basic functionality &gt; should detect when filters are applied" time="0.000529983">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Basic functionality &gt; should reset filters to default" time="0.000404828">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Search validation &gt; should validate search input successfully" time="0.000413875">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Search validation &gt; should reject empty search input" time="0.000281229">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Search validation &gt; should reject short search input" time="0.000221067">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Search validation &gt; should reject long search input" time="0.000289743">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Recent searches &gt; should save recent search" time="0.001455721">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Recent searches &gt; should not save empty search" time="0.000474972">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Recent searches &gt; should get recent searches" time="0.000218318">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Recent searches &gt; should handle corrupted localStorage data" time="0.000229456">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Recent searches &gt; should clear all recent searches" time="0.000245906">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; URL management &gt; should build URL parameters" time="0.000744848">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; URL management &gt; should not include empty parameters" time="0.000341114">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; URL management &gt; should parse URL parameters" time="0.000422943">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; URL management &gt; should handle missing URL parameters" time="0.000237147">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; State management &gt; should check if has results" time="0.000251581">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; State management &gt; should check if searching" time="0.000250404">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; State management &gt; should check if has searched" time="0.000219212">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; State management &gt; should get search statistics" time="0.000239922">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Error handling &gt; should format Error objects" time="0.000191388">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Error handling &gt; should format string errors" time="0.000137405">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Error handling &gt; should format unknown errors" time="0.000137538">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Search functionality &gt; should perform search successfully" time="0.000583669">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Search functionality &gt; should handle API errors gracefully" time="0.001654264">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Search functionality &gt; should throw error for empty query" time="0.00033125">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Sources functionality &gt; should get newsletter sources successfully" time="0.0003205">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Sources functionality &gt; should handle sources API errors" time="0.000323313">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Newsletter actions &gt; should mark newsletter as read and archived" time="0.000684216">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Newsletter actions &gt; should handle update errors" time="0.000486415">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Newsletter actions &gt; should open newsletter detail and update status" time="0.000425081">
        </testcase>
        <testcase classname="src/web/services/__tests__/searchService.simple.test.ts" name="SearchService Simple Tests &gt; Newsletter actions &gt; should navigate even if status update fails" time="0.000225215">
        </testcase>
    </testsuite>
    <testsuite name="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" timestamp="2025-06-19T01:01:26.161Z" hostname="MacBookPro.attlocal.net" tests="26" failures="21" errors="0" skipped="0" time="0.138049473">
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; markAsRead &gt; should mark newsletter as read successfully" time="0.028420531">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:63:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:76:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; markAsRead &gt; should handle service errors" time="0.006358726">
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; markAsRead &gt; should show toast notifications when enabled" time="0.0038875">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:63:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:120:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; markAsRead &gt; should show error toast on failure" time="0.003621139">
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; markAsRead &gt; should handle network errors" time="0.004996738">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:63:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:158:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; markAsRead &gt; should track loading state correctly" time="0.008100344">
            <failure message="expected false to be true // Object.is equality" type="AssertionError">
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:187:46
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; bulkMarkAsRead &gt; should mark multiple newsletters as read" time="0.002859137">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:127:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:214:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; bulkMarkAsRead &gt; should handle partial failures" time="0.003952742">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:127:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:239:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; bulkMarkAsRead &gt; should show appropriate toast messages" time="0.004115859">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:127:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:262:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; toggleLike &gt; should toggle like status successfully" time="0.004070018">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:192:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:289:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; toggleLike &gt; should show appropriate toast for like action" time="0.002351435">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:192:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:313:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; toggleLike &gt; should show appropriate toast for unlike action" time="0.002030089">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:192:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:331:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; toggleArchive &gt; should toggle archive status successfully" time="0.002887666">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:224:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:352:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; toggleArchive &gt; should show appropriate toast messages" time="0.002850555">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:224:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:376:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; reading queue operations &gt; should add to reading queue successfully" time="0.003141435">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:255:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:397:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; reading queue operations &gt; should remove from reading queue successfully" time="0.002425601">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:286:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:418:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; reading queue operations &gt; should show appropriate toast messages for queue operations" time="0.002001422">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:255:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:439:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; updateTags &gt; should update newsletter tags successfully" time="0.002431667">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:322:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:473:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; updateTags &gt; should handle tag update errors" time="0.011487559">
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; updateTags &gt; should show success toast for tag updates" time="0.002334227">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:322:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:520:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; error handling &gt; should provide error reset functions" time="0.004710252">
            <failure message="expected null to be truthy" type="AssertionError">
AssertionError: expected null to be truthy

- Expected: 
true

+ Received: 
null

 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:549:49
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; error handling &gt; should expose all error states" time="0.003902043">
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; loading states &gt; should expose all loading states" time="0.002938326">
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; query invalidation &gt; should invalidate related queries after successful operations" time="0.002689882">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:63:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:610:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; callback integration &gt; should not call callbacks when showToasts is disabled and no callbacks provided" time="0.003415667">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:63:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:635:9
            </failure>
        </testcase>
        <testcase classname="src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx" name="useNewsletterOperations &gt; callback integration &gt; should handle undefined newsletter in success callbacks" time="0.00351327">
            <failure message="Cannot read properties of undefined (reading &apos;error&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;error&apos;)
 ❯ Object.onError src/common/hooks/business/useNewsletterOperations.ts:63:11
 ❯ Mutation.execute node_modules/.pnpm/@tanstack+query-core@5.80.7/node_modules/@tanstack/query-core/src/mutation.ts:248:28
 ❯ src/common/hooks/business/__tests__/useNewsletterOperations.test.tsx:654:9
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" timestamp="2025-06-19T01:01:26.172Z" hostname="MacBookPro.attlocal.net" tests="10" failures="0" errors="0" skipped="0" time="0.047607261">
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should initialize with correct default values" time="0.02010366">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should not create observer when disabled" time="0.003246784">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should create IntersectionObserver with correct options when enabled" time="0.00468726">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should call onLoadMore when all conditions are met" time="0.002891088">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should not call onLoadMore when not intersecting" time="0.001323021">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should not call onLoadMore when no next page" time="0.001593126">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should not call onLoadMore when already fetching" time="0.001190573">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should update hasReachedEnd when no more pages" time="0.002542101">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should update isIntersecting state" time="0.001779128">
        </testcase>
        <testcase classname="src/common/hooks/infiniteScroll/__tests__/useInfiniteScroll.test.ts" name="useInfiniteScroll &gt; should disconnect observer on unmount" time="0.001432786">
        </testcase>
    </testsuite>
</testsuites>
